# ~/.gitconfig_aliases
# =============================================================================
# Aliases for Git sourced by `~/.gitconfig`.

[alias]
    # Lists aliases.
    aliases = config --get-regexp ^alias\\.

    # Amends the currently staged files to the latest commit.
	amend = commit -a --amend --reuse-message=HEAD

    # Edits the global config file
    ec = config --global -e

    # Switches to a branch, but doesn't create it.
	co = checkout

    # Switches to a branch, and creates it if it doesn't exist.
	cob = checkout -b

    # Brings in remote changes.
	up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # Commits all changes with a message
	cm = !git add -A && git commit -m

    # Commits as a Savepoint
	save = !git add -A && git commit -m 'SAVEPOINT'

    # Commits as a Work-in-Progress
	wip = !git add -u && git commit -m 'WIP'

    # Undos last commit
	undo = reset HEAD~1 --mixed


    # Wipes the last savepoint
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

    bclean = "!f() { git branch --merged ${1-develop} | grep -v " ${1-develop}$" | xargs -r git branch -d; }; f"
    bdone = "!f() { git checkout ${1-develop} && git up && git bclean ${1-develop}; }; f"
	prune-branches = !git remote prune origin && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D

    # list commmits in short form with colors and branch/tag annotations
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

    # list commits showing changed files
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

    # find a file path in the codebase
    f = "!git ls-files | grep -i"

    # search entire codebase for a string
    grep = grep -Ii
    gr = grep -Ii

    # grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    # Shows current working tree status using the short format
    s = status -sb
